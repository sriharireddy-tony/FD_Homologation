{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\SVN Projects\\\\FD_Homologation_LatesT\\\\FD_Homologation\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./report-config.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./report-config.component.css?ngResource\";\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ConfirmationService, MessageService } from 'primeng/api';\nimport { Services } from '../services/services';\nlet ReportConfigComponent = class ReportConfigComponent {\n  constructor(service, confirmationService, router) {\n    this.service = service;\n    this.confirmationService = confirmationService;\n    this.router = router;\n    this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\n    this.tableArr = [];\n    this.reportSelectedArr = [];\n    this.docNameDropArr = [];\n    this.reportName = '';\n    this.selectedRepObj = {};\n    this.REPORT_CONFIG_REF_ID = '';\n    this.call_modal = true;\n    this.data_send = {};\n    this.repConfigparam = {};\n    this.AAHPopup = 'none';\n    this.Version = '';\n    this.Remarks = '';\n    this.REPORT_REF_ID = '';\n    this.reportStatus = '';\n    this.clickView = false;\n    this.modeArr = [{\n      theader1: 'Engine Speed Rpm',\n      theader2: 'Gross Power KW**',\n      innerArr: [{\n        speed: '',\n        power: ''\n      }]\n    }, {\n      theader1: 'Engine Speed Rpm',\n      theader2: 'Gross Power KW**',\n      innerArr: [{\n        speed: '',\n        power: ''\n      }]\n    }, {\n      theader1: 'Engine Speed Rpm',\n      theader2: 'Gross Power KW**',\n      innerArr: [{\n        speed: '',\n        power: ''\n      }]\n    }];\n    this.measurmentArr = [{\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }, {\n      RefID: '',\n      Speed: '',\n      Power: ''\n    }];\n    this.isValidReviseStr = '';\n    this.reviseSubmitted = false;\n    this.subscription = this.service.createPageEvents.subscribe(call => {\n      if (call == 'Save') {\n        this.openRevision();\n      } else if (call == 'SaveasDraft') {\n        this.saveReportConfig('');\n      } else if (call == 'Revice') {\n        this.revisionClick();\n      } else if (call == 'AddNewLine') {\n        this.addNewLine();\n      }\n    });\n  }\n\n  ngOnInit() {\n    // this.getData();\n    this.GetFDHLReportNames();\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n\n  openRevision() {\n    this.AAHPopup = 'block';\n    const body = document.querySelector(\"body\");\n    body.style.overflow = \"hidden\";\n  }\n\n  closeRevision() {\n    this.AAHPopup = 'none';\n    const body = document.querySelector(\"body\");\n    body.style.overflow = \"auto\";\n  }\n\n  isValidRevise() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let obj = {\n        REPORT_REF_ID: _this.REPORT_REF_ID,\n        REPORT_VERSION: _this.Version\n      };\n      yield _this.service.invokeService(\"IsFDHLReportVersionAvailable\", obj, _this.namespace, true, false).then(res => {\n        _this.isValidReviseStr = res[0].IsFDHLReportVersionAvailable;\n      });\n    })();\n  }\n\n  callVersion() {\n    this.reviseSubmitted = false;\n  }\n\n  revisionSubmit() {\n    this.saveReportConfig('flag').then(data => {\n      this.isValidRevise();\n      this.reviseSubmitted = true;\n      this.call_modal = false;\n      setTimeout(() => {\n        if (this.isValidReviseStr == 'false') {\n          let param = {};\n\n          if (this.datavalidate(this.REPORT_REF_ID) == '') {\n            param = {\n              'tuple': {\n                'new': {\n                  'FD_HL_REPORT_M': {\n                    'REPORT_VERSION': this.Version,\n                    'REMARKS': this.Remarks,\n                    'STATUS': 1\n                  }\n                }\n              }\n            };\n          } else {\n            param = {\n              'tuple': {\n                'old': {\n                  'FD_HL_REPORT_M': {\n                    'REPORT_REF_ID': this.REPORT_REF_ID\n                  }\n                },\n                'new': {\n                  'FD_HL_REPORT_M': {\n                    'REPORT_VERSION': this.Version,\n                    'REMARKS': this.Remarks,\n                    'STATUS': 1\n                  }\n                }\n              }\n            };\n          }\n\n          this.service.invokeService(\"UpdateFdHlReportM\", param, this.namespace, true, false).then(res => {\n            this.reportStatus = res[0].STATUS;\n            this.service.repConfEventCall.next(this.REPORT_REF_ID + \",\" + 1);\n            this.getData();\n            setTimeout(() => {\n              this.call_modal = true;\n              this.data_send = {\n                'text': 'Data Saved Succssfully',\n                active: this.call_modal\n              };\n            }, 0);\n            this.closeRevision();\n          });\n        }\n      }, 500);\n    });\n  }\n\n  revisionClick() {\n    this.call_modal = false;\n    let param = {};\n\n    if (this.datavalidate(this.REPORT_REF_ID) != '') {\n      param = {\n        'tuple': {\n          'old': {\n            'FD_HL_REPORT_M': {\n              'REPORT_REF_ID': this.REPORT_REF_ID\n            }\n          },\n          'new': {\n            'FD_HL_REPORT_M': {\n              'STATUS': 0\n            }\n          }\n        }\n      };\n    }\n\n    this.service.invokeService(\"UpdateFdHlReportM\", param, this.namespace, true, false).then(res => {\n      this.reportStatus = res[0].STATUS;\n      this.getData();\n      this.service.repConfEventCall.next(this.REPORT_REF_ID + \",\" + 0);\n      this.clickedRow = null;\n      this.revisionClear();\n      setTimeout(() => {\n        this.call_modal = true;\n        this.data_send = {\n          'text': 'Revision Data Saved Succssfully',\n          active: this.call_modal\n        };\n      }, 0);\n    });\n  }\n\n  revisionClear() {\n    this.Version = '';\n    this.Remarks = '';\n    this.reviseSubmitted = false;\n  }\n\n  isDraggingEnabled(obj) {\n    if (this.reportStatus == '1') {\n      return this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' ? false : true;\n    } else {\n      return this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' ? true : false;\n    }\n  }\n\n  drop(e) {\n    this.reportSelectedArr = [];\n    moveItemInArray(this.tableArr, e.previousIndex, e.currentIndex);\n    this.tableArr.forEach(obj => {\n      if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\n        this.reportSelectedArr.push(obj);\n      }\n    });\n  }\n\n  GetFDHLReportNames() {\n    this.service.invokeService(\"GetFDHLReportNames\", null, this.namespace, true, false).then(res => {\n      this.docNameDropArr = res;\n    });\n  }\n\n  clickToView(obj) {\n    this.tableArr = [];\n    this.clickView = true;\n    this.reportStatus = obj.STATUS;\n    this.reportName = obj.REPORT_NAME;\n    this.REPORT_REF_ID = obj.REPORT_REF_ID;\n    this.selectedRepObj = obj;\n    this.repConfigparam = {\n      REPORT_REF_ID: obj.REPORT_REF_ID,\n      REPORT_NAME: obj.REPORT_NAME\n    };\n    this.service.repConfEventCall.next(obj.REPORT_REF_ID + \",\" + this.reportStatus);\n    this.getData();\n  }\n\n  getData() {\n    this.reportSelectedArr = [];\n    this.service.invokeService(\"GetFdHlReportConfiguration\", this.repConfigparam, this.namespace, true, false).then(res => {\n      this.tableArr = res;\n\n      if (this.reportStatus == '1') {\n        this.tableArr = res.filter(item => this.datavalidate(item.REPORT_CONFIG_REF_ID) != '');\n        return;\n      }\n\n      res.forEach(obj => {\n        if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\n          this.reportSelectedArr.push(obj);\n        }\n      });\n    });\n  }\n\n  back() {\n    this.clickView = false;\n    this.clickedRow = null;\n    this.service.repConfEventCall.next('' + \",\" + this.reportStatus);\n    this.service.addNewLineBtn.next('a');\n    this.GetFDHLReportNames();\n  }\n\n  reportSelected(obj) {\n    if (obj.isChecked) {\n      this.reportSelectedArr.push(obj);\n    } else {\n      this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1);\n    }\n  }\n\n  repRowClick(obj) {\n    if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '' && this.reportStatus == '0') {\n      this.clickedRow = this.tableArr.indexOf(obj);\n      this.service.addNewLineBtn.next(this.clickedRow);\n    }\n  }\n\n  addNewLine() {\n    let emptyObj = {\n      REPORT_ATTR_ID: '',\n      ATTR_REF_ID: '',\n      REPORT_ATTR_DESC: '',\n      REPORT_REF_ID: this.repConfigparam.REPORT_REF_ID,\n      REPORT_NAME: this.repConfigparam.REPORT_NAME,\n      REPORT_CONFIG_REF_ID: ''\n    }; // if (this.datavalidate(this.tableArr[this.clickedRow].REPORT_CONFIG_REF_ID) == '') {\n    //   this.service.addNewLineBtn.next('a');\n    //   this.clickedRow = null;\n    //   return;\n    // }\n\n    this.tableArr.splice(this.clickedRow + 1, 0, emptyObj);\n    this.reportSelectedArr.splice(this.clickedRow + 1, 0, emptyObj);\n    this.clickedRow = null;\n    this.service.addNewLineBtn.next('a');\n  }\n\n  saveReportConfig(arg) {\n    return new Promise((resolve, reject) => {\n      this.call_modal = false;\n      let ParamTuple = [];\n      var params = {};\n\n      for (var obj of this.reportSelectedArr) {\n        if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == \"\") {\n          params = {\n            'new': {\n              'FD_HL_REPORT_CONFIG': {\n                'REPORT_ATTR_ID': obj.REPORT_ATTR_ID,\n                'ATTR_REF_ID': obj.ATTR_REF_ID,\n                'REPORT_ATTR_DESC': obj.REPORT_ATTR_DESC,\n                'IS_ACTIVE': 1,\n                'REPORT_REF_ID': this.selectedRepObj.REPORT_REF_ID,\n                'REPORT_NAME': this.selectedRepObj.REPORT_NAME,\n                'REPORT_ATTR_ORDER': this.reportSelectedArr.indexOf(obj)\n              }\n            }\n          };\n        } else {\n          params = {\n            'old': {\n              'FD_HL_REPORT_CONFIG': {\n                'REPORT_CONFIG_REF_ID': obj.REPORT_CONFIG_REF_ID\n              }\n            },\n            'new': {\n              'FD_HL_REPORT_CONFIG': {\n                'REPORT_ATTR_ID': obj.REPORT_ATTR_ID,\n                'ATTR_REF_ID': obj.ATTR_REF_ID,\n                'REPORT_ATTR_DESC': obj.REPORT_ATTR_DESC,\n                'IS_ACTIVE': 1,\n                'REPORT_REF_ID': this.selectedRepObj.REPORT_REF_ID,\n                'REPORT_NAME': this.selectedRepObj.REPORT_NAME,\n                'REPORT_ATTR_ORDER': this.reportSelectedArr.indexOf(obj)\n              }\n            }\n          };\n        }\n\n        ParamTuple.push(params);\n      }\n\n      var paramsAll = {\n        'tuple': ParamTuple\n      };\n      this.service.invokeService(\"UpdateFdHlReportConfig\", paramsAll, this.namespace, true, false).then(res => {\n        // this.REPORT_CONFIG_REF_ID = res[0].REPORT_CONFIG_REF_ID\n        this.reportSelectedArr = [];\n        this.clickedRow = null;\n        this.reportStatus = '0';\n        this.service.addNewLineBtn.next('a');\n        this.getData();\n\n        if (arg == '') {\n          setTimeout(() => {\n            this.call_modal = true;\n            this.data_send = {\n              'text': 'Data Saved Succssfully',\n              active: this.call_modal\n            };\n          }, 0);\n        }\n\n        resolve('Res success from saving');\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  deleteRepRow(obj) {\n    this.service.addNewLineBtn.next('a');\n    this.call_modal = false;\n\n    if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete this file?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          let dataObj = {\n            tuple: {\n              old: {\n                FD_HL_REPORT_CONFIG: {\n                  REPORT_CONFIG_REF_ID: obj.REPORT_CONFIG_REF_ID\n                }\n              }\n            }\n          };\n          this.service.invokeService(\"UpdateFdHlReportConfig\", dataObj, this.namespace, true, false).then(res => {\n            this.tableArr.splice(this.tableArr.indexOf(obj), 1);\n            this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1);\n            this.getData(); // setTimeout(() => {\n            //   this.call_modal = true;\n            //   this.data_send = { text: 'File Deleted Successfully!', active: this.call_modal };\n            // }, 0);\n          });\n        },\n        reject: () => {}\n      });\n    } else {\n      if (this.datavalidate(obj.ATTR_REF_ID) != '') {\n        this.confirmationService.confirm({\n          message: 'Are you sure that you want to delete this file?',\n          header: 'Confirmation',\n          icon: 'pi pi-exclamation-triangle',\n          accept: () => {\n            let dataObj = {\n              tuple: {\n                old: {\n                  FD_HL_ATTRIBUTES_M: {\n                    ATTR_REF_ID: obj.ATTR_REF_ID\n                  }\n                }\n              }\n            };\n            this.service.invokeService(\"UpdateFdHlAttributesM\", dataObj, this.namespace, true, false).then(res => {\n              this.tableArr.splice(this.tableArr.indexOf(obj), 1); // setTimeout(() => {\n              //   this.call_modal = true;\n              //   this.data_send = { text: 'File Deleted Successfully!', active: this.call_modal };\n              // }, 0);\n            });\n          },\n          reject: () => {}\n        });\n      } else {\n        this.tableArr.splice(this.tableArr.indexOf(obj), 1);\n        this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1); // this.reportSelectedArr\n      }\n    }\n  }\n\n  disRepId(obj) {\n    let flag = false;\n\n    if (this.reportStatus == '1') {\n      flag = true;\n    } else {\n      if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' && !obj.isChecked) {\n        flag = true;\n      }\n\n      if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '' && this.datavalidate(obj.isChecked) == '') {\n        flag = false;\n      }\n    }\n\n    return flag;\n  }\n\n  datavalidate(data) {\n    //debugger;\n    if (data != undefined && data != null && data != \"\") {\n      return data;\n    } else {\n      return \"\";\n    }\n  }\n\n};\n\nReportConfigComponent.ctorParameters = () => [{\n  type: Services\n}, {\n  type: ConfirmationService\n}, {\n  type: Router\n}];\n\nReportConfigComponent = __decorate([Component({\n  selector: 'app-report-config',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [ConfirmationService, MessageService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], ReportConfigComponent);\nexport { ReportConfigComponent };","map":{"version":3,"sources":["D:/SVN Projects/FD_Homologation_LatesT/FD_Homologation/src/app/report-config/report-config.component.ts"],"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","moveItemInArray","Component","Router","ConfirmationService","MessageService","Services","ReportConfigComponent","constructor","service","confirmationService","router","namespace","tableArr","reportSelectedArr","docNameDropArr","reportName","selectedRepObj","REPORT_CONFIG_REF_ID","call_modal","data_send","repConfigparam","AAHPopup","Version","Remarks","REPORT_REF_ID","reportStatus","clickView","modeArr","theader1","theader2","innerArr","speed","power","measurmentArr","RefID","Speed","Power","isValidReviseStr","reviseSubmitted","subscription","createPageEvents","subscribe","call","openRevision","saveReportConfig","revisionClick","addNewLine","ngOnInit","GetFDHLReportNames","ngOnDestroy","_a","unsubscribe","body","document","querySelector","style","overflow","closeRevision","isValidRevise","obj","REPORT_VERSION","invokeService","then","res","IsFDHLReportVersionAvailable","callVersion","revisionSubmit","data","setTimeout","param","datavalidate","STATUS","repConfEventCall","next","getData","active","clickedRow","revisionClear","isDraggingEnabled","drop","e","previousIndex","currentIndex","forEach","push","clickToView","REPORT_NAME","filter","item","back","addNewLineBtn","reportSelected","isChecked","splice","indexOf","repRowClick","emptyObj","REPORT_ATTR_ID","ATTR_REF_ID","REPORT_ATTR_DESC","arg","Promise","resolve","reject","ParamTuple","params","paramsAll","catch","deleteRepRow","confirm","message","header","icon","accept","dataObj","tuple","old","FD_HL_REPORT_CONFIG","FD_HL_ATTRIBUTES_M","disRepId","flag","undefined","ctorParameters","type","selector","template","providers","styles"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport __NG_CLI_RESOURCE__0 from \"./report-config.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./report-config.component.css?ngResource\";\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmationService, MessageService } from 'primeng/api';\r\nimport { Services } from '../services/services';\r\nlet ReportConfigComponent = class ReportConfigComponent {\r\n    constructor(service, confirmationService, router) {\r\n        this.service = service;\r\n        this.confirmationService = confirmationService;\r\n        this.router = router;\r\n        this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\r\n        this.tableArr = [];\r\n        this.reportSelectedArr = [];\r\n        this.docNameDropArr = [];\r\n        this.reportName = '';\r\n        this.selectedRepObj = {};\r\n        this.REPORT_CONFIG_REF_ID = '';\r\n        this.call_modal = true;\r\n        this.data_send = {};\r\n        this.repConfigparam = {};\r\n        this.AAHPopup = 'none';\r\n        this.Version = '';\r\n        this.Remarks = '';\r\n        this.REPORT_REF_ID = '';\r\n        this.reportStatus = '';\r\n        this.clickView = false;\r\n        this.modeArr = [{ theader1: 'Engine Speed Rpm', theader2: 'Gross Power KW**', innerArr: [{ speed: '', power: '' }] },\r\n            { theader1: 'Engine Speed Rpm', theader2: 'Gross Power KW**', innerArr: [{ speed: '', power: '' }] },\r\n            { theader1: 'Engine Speed Rpm', theader2: 'Gross Power KW**', innerArr: [{ speed: '', power: '' }] }];\r\n        this.measurmentArr = [{ RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' },\r\n            { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' },\r\n            { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }, { RefID: '', Speed: '', Power: '' }];\r\n        this.isValidReviseStr = '';\r\n        this.reviseSubmitted = false;\r\n        this.subscription = this.service.createPageEvents.subscribe((call) => {\r\n            if (call == 'Save') {\r\n                this.openRevision();\r\n            }\r\n            else if (call == 'SaveasDraft') {\r\n                this.saveReportConfig('');\r\n            }\r\n            else if (call == 'Revice') {\r\n                this.revisionClick();\r\n            }\r\n            else if (call == 'AddNewLine') {\r\n                this.addNewLine();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        // this.getData();\r\n        this.GetFDHLReportNames();\r\n    }\r\n    ngOnDestroy() {\r\n        var _a;\r\n        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n    }\r\n    openRevision() {\r\n        this.AAHPopup = 'block';\r\n        const body = document.querySelector(\"body\");\r\n        body.style.overflow = \"hidden\";\r\n    }\r\n    closeRevision() {\r\n        this.AAHPopup = 'none';\r\n        const body = document.querySelector(\"body\");\r\n        body.style.overflow = \"auto\";\r\n    }\r\n    async isValidRevise() {\r\n        let obj = { REPORT_REF_ID: this.REPORT_REF_ID, REPORT_VERSION: this.Version };\r\n        await this.service.invokeService(\"IsFDHLReportVersionAvailable\", obj, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.isValidReviseStr = res[0].IsFDHLReportVersionAvailable;\r\n        });\r\n    }\r\n    callVersion() {\r\n        this.reviseSubmitted = false;\r\n    }\r\n    revisionSubmit() {\r\n        this.saveReportConfig('flag').then((data) => {\r\n            this.isValidRevise();\r\n            this.reviseSubmitted = true;\r\n            this.call_modal = false;\r\n            setTimeout(() => {\r\n                if (this.isValidReviseStr == 'false') {\r\n                    let param = {};\r\n                    if (this.datavalidate(this.REPORT_REF_ID) == '') {\r\n                        param = {\r\n                            'tuple': {\r\n                                'new': {\r\n                                    'FD_HL_REPORT_M': {\r\n                                        'REPORT_VERSION': this.Version,\r\n                                        'REMARKS': this.Remarks,\r\n                                        'STATUS': 1\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n                    else {\r\n                        param = {\r\n                            'tuple': {\r\n                                'old': {\r\n                                    'FD_HL_REPORT_M': {\r\n                                        'REPORT_REF_ID': this.REPORT_REF_ID\r\n                                    }\r\n                                },\r\n                                'new': {\r\n                                    'FD_HL_REPORT_M': {\r\n                                        'REPORT_VERSION': this.Version,\r\n                                        'REMARKS': this.Remarks,\r\n                                        'STATUS': 1\r\n                                    }\r\n                                },\r\n                            }\r\n                        };\r\n                    }\r\n                    this.service.invokeService(\"UpdateFdHlReportM\", param, this.namespace, true, false)\r\n                        .then((res) => {\r\n                        this.reportStatus = res[0].STATUS;\r\n                        this.service.repConfEventCall.next(this.REPORT_REF_ID + \",\" + 1);\r\n                        this.getData();\r\n                        setTimeout(() => {\r\n                            this.call_modal = true;\r\n                            this.data_send = { 'text': 'Data Saved Succssfully', active: this.call_modal };\r\n                        }, 0);\r\n                        this.closeRevision();\r\n                    });\r\n                }\r\n            }, 500);\r\n        });\r\n    }\r\n    revisionClick() {\r\n        this.call_modal = false;\r\n        let param = {};\r\n        if (this.datavalidate(this.REPORT_REF_ID) != '') {\r\n            param = {\r\n                'tuple': {\r\n                    'old': {\r\n                        'FD_HL_REPORT_M': {\r\n                            'REPORT_REF_ID': this.REPORT_REF_ID\r\n                        }\r\n                    },\r\n                    'new': {\r\n                        'FD_HL_REPORT_M': {\r\n                            'STATUS': 0\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        this.service.invokeService(\"UpdateFdHlReportM\", param, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.reportStatus = res[0].STATUS;\r\n            this.getData();\r\n            this.service.repConfEventCall.next(this.REPORT_REF_ID + \",\" + 0);\r\n            this.clickedRow = null;\r\n            this.revisionClear();\r\n            setTimeout(() => {\r\n                this.call_modal = true;\r\n                this.data_send = { 'text': 'Revision Data Saved Succssfully', active: this.call_modal };\r\n            }, 0);\r\n        });\r\n    }\r\n    revisionClear() {\r\n        this.Version = '';\r\n        this.Remarks = '';\r\n        this.reviseSubmitted = false;\r\n    }\r\n    isDraggingEnabled(obj) {\r\n        if (this.reportStatus == '1') {\r\n            return (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' ? false : true);\r\n        }\r\n        else {\r\n            return (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' ? true : false);\r\n        }\r\n    }\r\n    ;\r\n    drop(e) {\r\n        this.reportSelectedArr = [];\r\n        moveItemInArray(this.tableArr, e.previousIndex, e.currentIndex);\r\n        this.tableArr.forEach((obj) => {\r\n            if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\r\n                this.reportSelectedArr.push(obj);\r\n            }\r\n        });\r\n    }\r\n    GetFDHLReportNames() {\r\n        this.service.invokeService(\"GetFDHLReportNames\", null, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.docNameDropArr = res;\r\n        });\r\n    }\r\n    clickToView(obj) {\r\n        this.tableArr = [];\r\n        this.clickView = true;\r\n        this.reportStatus = obj.STATUS;\r\n        this.reportName = obj.REPORT_NAME;\r\n        this.REPORT_REF_ID = obj.REPORT_REF_ID;\r\n        this.selectedRepObj = obj;\r\n        this.repConfigparam = { REPORT_REF_ID: obj.REPORT_REF_ID, REPORT_NAME: obj.REPORT_NAME };\r\n        this.service.repConfEventCall.next(obj.REPORT_REF_ID + \",\" + this.reportStatus);\r\n        this.getData();\r\n    }\r\n    getData() {\r\n        this.reportSelectedArr = [];\r\n        this.service.invokeService(\"GetFdHlReportConfiguration\", this.repConfigparam, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.tableArr = res;\r\n            if (this.reportStatus == '1') {\r\n                this.tableArr = res.filter((item) => this.datavalidate(item.REPORT_CONFIG_REF_ID) != '');\r\n                return;\r\n            }\r\n            res.forEach((obj) => {\r\n                if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\r\n                    this.reportSelectedArr.push(obj);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    back() {\r\n        this.clickView = false;\r\n        this.clickedRow = null;\r\n        this.service.repConfEventCall.next('' + \",\" + this.reportStatus);\r\n        this.service.addNewLineBtn.next('a');\r\n        this.GetFDHLReportNames();\r\n    }\r\n    reportSelected(obj) {\r\n        if (obj.isChecked) {\r\n            this.reportSelectedArr.push(obj);\r\n        }\r\n        else {\r\n            this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1);\r\n        }\r\n    }\r\n    repRowClick(obj) {\r\n        if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '' && this.reportStatus == '0') {\r\n            this.clickedRow = this.tableArr.indexOf(obj);\r\n            this.service.addNewLineBtn.next(this.clickedRow);\r\n        }\r\n    }\r\n    addNewLine() {\r\n        let emptyObj = {\r\n            REPORT_ATTR_ID: '',\r\n            ATTR_REF_ID: '',\r\n            REPORT_ATTR_DESC: '',\r\n            REPORT_REF_ID: this.repConfigparam.REPORT_REF_ID,\r\n            REPORT_NAME: this.repConfigparam.REPORT_NAME,\r\n            REPORT_CONFIG_REF_ID: ''\r\n        };\r\n        // if (this.datavalidate(this.tableArr[this.clickedRow].REPORT_CONFIG_REF_ID) == '') {\r\n        //   this.service.addNewLineBtn.next('a');\r\n        //   this.clickedRow = null;\r\n        //   return;\r\n        // }\r\n        this.tableArr.splice(this.clickedRow + 1, 0, emptyObj);\r\n        this.reportSelectedArr.splice(this.clickedRow + 1, 0, emptyObj);\r\n        this.clickedRow = null;\r\n        this.service.addNewLineBtn.next('a');\r\n    }\r\n    saveReportConfig(arg) {\r\n        return new Promise((resolve, reject) => {\r\n            this.call_modal = false;\r\n            let ParamTuple = [];\r\n            var params = {};\r\n            for (var obj of this.reportSelectedArr) {\r\n                if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == \"\") {\r\n                    params = {\r\n                        'new': {\r\n                            'FD_HL_REPORT_CONFIG': {\r\n                                'REPORT_ATTR_ID': obj.REPORT_ATTR_ID,\r\n                                'ATTR_REF_ID': obj.ATTR_REF_ID,\r\n                                'REPORT_ATTR_DESC': obj.REPORT_ATTR_DESC,\r\n                                'IS_ACTIVE': 1,\r\n                                'REPORT_REF_ID': this.selectedRepObj.REPORT_REF_ID,\r\n                                'REPORT_NAME': this.selectedRepObj.REPORT_NAME,\r\n                                'REPORT_ATTR_ORDER': this.reportSelectedArr.indexOf(obj)\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                else {\r\n                    params = {\r\n                        'old': {\r\n                            'FD_HL_REPORT_CONFIG': {\r\n                                'REPORT_CONFIG_REF_ID': obj.REPORT_CONFIG_REF_ID\r\n                            }\r\n                        },\r\n                        'new': {\r\n                            'FD_HL_REPORT_CONFIG': {\r\n                                'REPORT_ATTR_ID': obj.REPORT_ATTR_ID,\r\n                                'ATTR_REF_ID': obj.ATTR_REF_ID,\r\n                                'REPORT_ATTR_DESC': obj.REPORT_ATTR_DESC,\r\n                                'IS_ACTIVE': 1,\r\n                                'REPORT_REF_ID': this.selectedRepObj.REPORT_REF_ID,\r\n                                'REPORT_NAME': this.selectedRepObj.REPORT_NAME,\r\n                                'REPORT_ATTR_ORDER': this.reportSelectedArr.indexOf(obj)\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                ParamTuple.push(params);\r\n            }\r\n            var paramsAll = { 'tuple': ParamTuple };\r\n            this.service.invokeService(\"UpdateFdHlReportConfig\", paramsAll, this.namespace, true, false)\r\n                .then((res) => {\r\n                // this.REPORT_CONFIG_REF_ID = res[0].REPORT_CONFIG_REF_ID\r\n                this.reportSelectedArr = [];\r\n                this.clickedRow = null;\r\n                this.reportStatus = '0';\r\n                this.service.addNewLineBtn.next('a');\r\n                this.getData();\r\n                if (arg == '') {\r\n                    setTimeout(() => {\r\n                        this.call_modal = true;\r\n                        this.data_send = { 'text': 'Data Saved Succssfully', active: this.call_modal };\r\n                    }, 0);\r\n                }\r\n                resolve('Res success from saving');\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n    deleteRepRow(obj) {\r\n        this.service.addNewLineBtn.next('a');\r\n        this.call_modal = false;\r\n        if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '') {\r\n            this.confirmationService.confirm({\r\n                message: 'Are you sure that you want to delete this file?', header: 'Confirmation', icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    let dataObj = {\r\n                        tuple: {\r\n                            old: {\r\n                                FD_HL_REPORT_CONFIG: {\r\n                                    REPORT_CONFIG_REF_ID: obj.REPORT_CONFIG_REF_ID,\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    this.service.invokeService(\"UpdateFdHlReportConfig\", dataObj, this.namespace, true, false)\r\n                        .then((res) => {\r\n                        this.tableArr.splice(this.tableArr.indexOf(obj), 1);\r\n                        this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1);\r\n                        this.getData();\r\n                        // setTimeout(() => {\r\n                        //   this.call_modal = true;\r\n                        //   this.data_send = { text: 'File Deleted Successfully!', active: this.call_modal };\r\n                        // }, 0);\r\n                    });\r\n                },\r\n                reject: () => { }\r\n            });\r\n        }\r\n        else {\r\n            if (this.datavalidate(obj.ATTR_REF_ID) != '') {\r\n                this.confirmationService.confirm({\r\n                    message: 'Are you sure that you want to delete this file?', header: 'Confirmation', icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        let dataObj = {\r\n                            tuple: {\r\n                                old: {\r\n                                    FD_HL_ATTRIBUTES_M: {\r\n                                        ATTR_REF_ID: obj.ATTR_REF_ID,\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        this.service.invokeService(\"UpdateFdHlAttributesM\", dataObj, this.namespace, true, false)\r\n                            .then((res) => {\r\n                            this.tableArr.splice(this.tableArr.indexOf(obj), 1);\r\n                            // setTimeout(() => {\r\n                            //   this.call_modal = true;\r\n                            //   this.data_send = { text: 'File Deleted Successfully!', active: this.call_modal };\r\n                            // }, 0);\r\n                        });\r\n                    },\r\n                    reject: () => { }\r\n                });\r\n            }\r\n            else {\r\n                this.tableArr.splice(this.tableArr.indexOf(obj), 1);\r\n                this.reportSelectedArr.splice(this.reportSelectedArr.indexOf(obj), 1);\r\n                // this.reportSelectedArr\r\n            }\r\n        }\r\n    }\r\n    disRepId(obj) {\r\n        let flag = false;\r\n        if (this.reportStatus == '1') {\r\n            flag = true;\r\n        }\r\n        else {\r\n            if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) == '' && !obj.isChecked) {\r\n                flag = true;\r\n            }\r\n            if (this.datavalidate(obj.REPORT_CONFIG_REF_ID) != '' && this.datavalidate(obj.isChecked) == '') {\r\n                flag = false;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n    datavalidate(data) {\r\n        //debugger;\r\n        if (data != undefined && data != null && data != \"\") {\r\n            return data;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n};\r\nReportConfigComponent.ctorParameters = () => [\r\n    { type: Services },\r\n    { type: ConfirmationService },\r\n    { type: Router }\r\n];\r\nReportConfigComponent = __decorate([\r\n    Component({\r\n        selector: 'app-report-config',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        providers: [ConfirmationService, MessageService],\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    })\r\n], ReportConfigComponent);\r\nexport { ReportConfigComponent };\r\n"]},"metadata":{},"sourceType":"module"}