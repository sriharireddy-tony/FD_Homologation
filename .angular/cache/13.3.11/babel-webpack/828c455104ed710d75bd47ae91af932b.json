{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\SVN Projects\\\\FD_Homologation_LatesT\\\\FD_Homologation\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./covering-letter.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./covering-letter.component.css?ngResource\";\nimport { DatePipe } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { ConfirmationService, ConfirmEventType, MessageService } from 'primeng/api';\nimport { Services } from 'src/app/services/services';\nlet CoveringLetterComponent = class CoveringLetterComponent {\n  constructor(service, datepipe, confirmationService) {\n    this.service = service;\n    this.datepipe = datepipe;\n    this.confirmationService = confirmationService;\n    this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\n    this.obj1 = '';\n    this.locationArr = [];\n    this.address = '';\n    this.engineVarient = [];\n    this.regards = '';\n    this.call_modal = false;\n    this.data_send = {};\n    this.HR_REF_NO1 = '';\n    this.openAs = false;\n    this.isSave = ''; // ngOnDestroy() {\n    //   this.subscription?.unsubscribe()\n    // }\n\n    this.encolosureArr = [{\n      ENCLOSURE: '',\n      CL_ENC_REF_NO: ''\n    }];\n    this.regardsArr = [{\n      iamge: 'image',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }];\n    this.regardsDropArr = [];\n    this.regardsResponseArr = [];\n    this.CL_REF_NO = '';\n    this.TO = '';\n    this.coveringDate = '';\n    this.CL_CONTENT = '';\n    this.getCoverData = [];\n    this.service.OpenAs.subscribe(call1 => {\n      this.openAs = call1;\n    });\n    this.service.HR_REF_NO.subscribe(call => {\n      this.HR_REF_NO1 = call.HR_REF_NO;\n    });\n    this.getLocation();\n    this.getRegardsDrop();\n    this.service.lovMasaterList.subscribe(lovMasaterList => {\n      this.engineVarient = $.cordys.json.findObjects(lovMasaterList, 'LOV_TYPE', 'ENGINE_VARIANT');\n    });\n  }\n\n  ngOnChanges(changes) {\n    for (let propName in changes) {\n      if (propName == 'clarificationType') {\n        let chng = changes[propName];\n        this.clarificationType = chng.currentValue;\n      }\n\n      if (propName == 'HR_REF_NO') {\n        let chng = changes[propName];\n        this.HR_REF_NO = chng.currentValue;\n\n        if (this.datavalidate(this.HR_REF_NO) != '') {\n          setTimeout(() => {\n            this.getFDHLCLEnClosureDetails();\n            this.getFDHLCoveringLetterDetails();\n          }, 1500);\n        }\n      }\n    }\n  }\n\n  ngOnInit() {}\n\n  clear() {\n    this.encolosureArr.forEach(obj => {\n      obj.ENCLOSURE = null;\n    });\n    this.TO = '';\n    this.coveringDate = '';\n    this.CL_CONTENT = ''; // let ev = {target:{value:''}}\n    // this.selectRegards(ev);\n\n    this.regardsArr = [{\n      iamge: 'image',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }, {\n      iamge: '',\n      data: ''\n    }];\n    this.address = '';\n    this.regards = '';\n  }\n\n  clearSave() {\n    this.call_modal = false;\n    Promise.all([this.updateFdHlClEnclosure(), this.updateFdHlCoveringLetter()]).then(res => {\n      this.call_modal = true;\n      this.data_send = {\n        text: 'Covering Letter data saved successfully',\n        active: this.call_modal\n      };\n    });\n  }\n\n  addEnclosure() {\n    this.encolosureArr.push({\n      ENCLOSURE: '',\n      CL_ENC_REF_NO: ''\n    });\n  }\n\n  deleteEnclosure(obj) {\n    this.call_modal = false;\n\n    if (obj.CL_ENC_REF_NO != '') {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete enclosure?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          let dataObj = {\n            tuple: {\n              old: {\n                FD_HL_CL_ENCLOSURE: {\n                  CL_ENC_REF_NO: obj.CL_ENC_REF_NO\n                }\n              }\n            }\n          };\n          this.service.invokeService(\"UpdateFdHlClEnclosure\", dataObj, this.namespace, true, false).then(ajaxResponse => {\n            this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1); // this.call_modal = true;\n            // this.data_send = { text: 'Record deleted successfully', active: this.call_modal};\n          });\n        },\n        reject: type => {\n          switch (type) {\n            case ConfirmEventType.REJECT:\n              break;\n\n            case ConfirmEventType.CANCEL:\n              break;\n          }\n        }\n      });\n    } else {\n      this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\n    }\n  }\n\n  updateFdHlClEnclosure() {\n    return new Promise((resolve, reject) => {\n      let ParamTuple = [];\n      var params = {};\n\n      for (var obj of this.encolosureArr) {\n        if (this.datavalidate(obj.CL_ENC_REF_NO) == \"\") {\n          params = {\n            'new': {\n              'FD_HL_CL_ENCLOSURE': {\n                'HR_REF_NO': this.HR_REF_NO1,\n                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE)\n              }\n            }\n          };\n        } else {\n          params = {\n            'old': {\n              'FD_HL_CL_ENCLOSURE': {\n                'CL_ENC_REF_NO': obj.CL_ENC_REF_NO\n              }\n            },\n            'new': {\n              'FD_HL_CL_ENCLOSURE': {\n                'HR_REF_NO': this.HR_REF_NO1,\n                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE)\n              }\n            }\n          };\n        }\n\n        ParamTuple.push(params);\n      }\n\n      var paramsAll = {\n        'tuple': ParamTuple\n      };\n      this.service.invokeService(\"UpdateFdHlClEnclosure\", paramsAll, this.namespace, true, false).then(res => {\n        this.encolosureArr = res;\n        resolve('Res success from enclosure');\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  getFDHLCLEnClosureDetails() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var param = {\n        HR_REF_NO: _this.datavalidate(_this.HR_REF_NO)\n      };\n      yield _this.service.invokeService(\"GetFDHLCLEnClosureDetails\", param, _this.namespace, true, false).then(res => {\n        _this.encolosureArr = res;\n      });\n    })();\n  }\n\n  getLocation() {\n    this.service.invokeService(\"GetFD_HLAddressDetails\", null, this.namespace, true, false).then(res => {\n      res.filter(obj => {\n        if (obj.ADDR_TYPE == 'TO') {\n          this.locationArr.push({\n            ADDRESS: obj.ADDRESS,\n            ADDR_NAME: obj.ADDR_NAME\n          });\n        }\n      });\n    });\n  }\n\n  getRegardsDrop() {\n    this.service.invokeService(\"GetFDHLRegardsDetails\", null, this.namespace, true, false).then(res => {\n      res.forEach(d => {\n        this.regardsResponseArr = res;\n        this.regardsDropArr.push(d.CL_REGARDS);\n      });\n    });\n  }\n\n  selectRegards(e) {\n    this.regardsArr = [];\n    this.regardsResponseArr.filter(data => {\n      if (data.CL_REGARDS == e.target.value) {\n        this.regardsArr.push({\n          iamge: 'image',\n          data: data.SIGNATURE\n        });\n        this.regardsArr.push({\n          iamge: '',\n          data: data.REGA_NAME\n        });\n        this.regardsArr.push({\n          iamge: '',\n          data: data.DESIGNATION\n        });\n        this.regardsArr.push({\n          iamge: '',\n          data: data.DEPARTMENT\n        });\n        this.regardsArr.push({\n          iamge: '',\n          data: data.COMPANY_NAME\n        });\n      }\n    });\n\n    if (e.target.value == '') {\n      this.regardsArr = [{\n        iamge: 'image',\n        data: ''\n      }, {\n        iamge: '',\n        data: ''\n      }, {\n        iamge: '',\n        data: ''\n      }, {\n        iamge: '',\n        data: ''\n      }, {\n        iamge: '',\n        data: ''\n      }];\n    }\n  }\n\n  selectLocation(e) {\n    this.locationArr.filter(d => {\n      if (d.ADDR_NAME == e.target.value) {\n        this.address = d.ADDRESS;\n      }\n    });\n  }\n\n  updateFdHlCoveringLetter() {\n    return new Promise((resolve, reject) => {\n      let dataObj = {};\n\n      if (this.datavalidate(this.CL_REF_NO) != '') {\n        dataObj = {\n          tuple: {\n            old: {\n              FD_HL_COVERING_LETTER: {\n                CL_REF_NO: this.CL_REF_NO\n              }\n            },\n            new: {\n              FD_HL_COVERING_LETTER: {\n                'CL_TO': this.datavalidate(this.TO),\n                'CL_ADDRESS': this.datavalidate(this.address),\n                'CL_DATE': this.service.dateFilter(this.coveringDate),\n                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\n                'CL_CONTENT': this.CL_CONTENT,\n                'SIGNATURE': this.regardsArr[0].data,\n                'REGA_NAME': this.regardsArr[1].data,\n                'DESIGNATION': this.regardsArr[2].data,\n                'DEPARTMENT': this.regardsArr[3].data,\n                'COMPANY_NAME': this.regardsArr[4].data,\n                'CL_REGARDS': this.regards\n              }\n            }\n          }\n        };\n      } else {\n        dataObj = {\n          tuple: {\n            new: {\n              FD_HL_COVERING_LETTER: {\n                'HR_REF_NO': this.datavalidate(this.HR_REF_NO),\n                'CL_TO': this.datavalidate(this.TO),\n                'CL_ADDRESS': this.datavalidate(this.address),\n                'CL_DATE': this.service.dateFilter(this.coveringDate),\n                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\n                'CL_CONTENT': this.CL_CONTENT,\n                'SIGNATURE': this.regardsArr[0].data,\n                'REGA_NAME': this.regardsArr[1].data,\n                'DESIGNATION': this.regardsArr[2].data,\n                'DEPARTMENT': this.regardsArr[3].data,\n                'COMPANY_NAME': this.regardsArr[4].data,\n                'CL_REGARDS': this.regards\n              }\n            }\n          }\n        };\n      }\n\n      this.service.invokeService(\"UpdateFdHlCoveringLetter\", dataObj, this.namespace, true, false).then(res => {\n        this.CL_REF_NO = res[0].CL_REF_NO;\n        resolve('Res success from covering');\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  getFDHLCoveringLetterDetails() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.regardsArr = [];\n      let param = {\n        HR_REF_NO: _this2.HR_REF_NO\n      };\n      yield _this2.service.invokeService(\"GetFDHLCoveringLetterDetails\", param, _this2.namespace, true, false).then(res => {\n        // let obj={target :{value:res[0].CL_REGARDS}}\n        _this2.getCoverData = res[0];\n        _this2.CL_REF_NO = res[0].CL_REF_NO;\n        _this2.TO = _this2.datavalidate(res[0].CL_TO);\n        _this2.coveringDate = _this2.datavalidate(_this2.datepipe.transform(res[0].CL_DATE, 'dd-MM-yyyy'));\n        _this2.CL_CONTENT = res[0].CL_CONTENT;\n        _this2.address = res[0].CL_ADDRESS;\n        _this2.regards = _this2.datavalidate(res[0].CL_REGARDS);\n\n        _this2.regardsArr.push({\n          iamge: 'image',\n          data: res[0].SIGNATURE\n        });\n\n        _this2.regardsArr.push({\n          iamge: '',\n          data: res[0].REGA_NAME\n        });\n\n        _this2.regardsArr.push({\n          iamge: '',\n          data: res[0].DESIGNATION\n        });\n\n        _this2.regardsArr.push({\n          iamge: '',\n          data: res[0].DEPARTMENT\n        });\n\n        _this2.regardsArr.push({\n          iamge: '',\n          data: res[0].COMPANY_NAME\n        });\n      });\n    })();\n  }\n\n  datavalidate(data) {\n    if (data != undefined && data != null && data != \"\") {\n      return data;\n    } else {\n      return \"\";\n    }\n  }\n\n};\n\nCoveringLetterComponent.ctorParameters = () => [{\n  type: Services\n}, {\n  type: DatePipe\n}, {\n  type: ConfirmationService\n}];\n\nCoveringLetterComponent.propDecorators = {\n  HR_REF_NO: [{\n    type: Input\n  }],\n  clarificationType: [{\n    type: Input\n  }]\n};\nCoveringLetterComponent = __decorate([Component({\n  selector: 'app-covering-letter',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [ConfirmationService, MessageService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], CoveringLetterComponent);\nexport { CoveringLetterComponent };","map":{"version":3,"sources":["D:/SVN Projects/FD_Homologation_LatesT/FD_Homologation/src/app/create-new-request/covering-letter/covering-letter.component.ts"],"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","DatePipe","Component","Input","ConfirmationService","ConfirmEventType","MessageService","Services","CoveringLetterComponent","constructor","service","datepipe","confirmationService","namespace","obj1","locationArr","address","engineVarient","regards","call_modal","data_send","HR_REF_NO1","openAs","isSave","encolosureArr","ENCLOSURE","CL_ENC_REF_NO","regardsArr","iamge","data","regardsDropArr","regardsResponseArr","CL_REF_NO","TO","coveringDate","CL_CONTENT","getCoverData","OpenAs","subscribe","call1","HR_REF_NO","call","getLocation","getRegardsDrop","lovMasaterList","$","cordys","json","findObjects","ngOnChanges","changes","propName","chng","clarificationType","currentValue","datavalidate","setTimeout","getFDHLCLEnClosureDetails","getFDHLCoveringLetterDetails","ngOnInit","clear","forEach","obj","clearSave","Promise","all","updateFdHlClEnclosure","updateFdHlCoveringLetter","then","res","text","active","addEnclosure","push","deleteEnclosure","confirm","message","header","icon","accept","dataObj","tuple","old","FD_HL_CL_ENCLOSURE","invokeService","ajaxResponse","splice","indexOf","reject","type","REJECT","CANCEL","resolve","ParamTuple","params","paramsAll","catch","e","param","filter","ADDR_TYPE","ADDRESS","ADDR_NAME","d","CL_REGARDS","selectRegards","target","value","SIGNATURE","REGA_NAME","DESIGNATION","DEPARTMENT","COMPANY_NAME","selectLocation","FD_HL_COVERING_LETTER","new","dateFilter","CL_TO","transform","CL_DATE","CL_ADDRESS","undefined","ctorParameters","propDecorators","selector","template","providers","styles"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport __NG_CLI_RESOURCE__0 from \"./covering-letter.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./covering-letter.component.css?ngResource\";\r\nimport { DatePipe } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { ConfirmationService, ConfirmEventType, MessageService } from 'primeng/api';\r\nimport { Services } from 'src/app/services/services';\r\nlet CoveringLetterComponent = class CoveringLetterComponent {\r\n    constructor(service, datepipe, confirmationService) {\r\n        this.service = service;\r\n        this.datepipe = datepipe;\r\n        this.confirmationService = confirmationService;\r\n        this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\r\n        this.obj1 = '';\r\n        this.locationArr = [];\r\n        this.address = '';\r\n        this.engineVarient = [];\r\n        this.regards = '';\r\n        this.call_modal = false;\r\n        this.data_send = {};\r\n        this.HR_REF_NO1 = '';\r\n        this.openAs = false;\r\n        this.isSave = '';\r\n        // ngOnDestroy() {\r\n        //   this.subscription?.unsubscribe()\r\n        // }\r\n        this.encolosureArr = [{ ENCLOSURE: '', CL_ENC_REF_NO: '' }];\r\n        this.regardsArr = [{ iamge: 'image', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }];\r\n        this.regardsDropArr = [];\r\n        this.regardsResponseArr = [];\r\n        this.CL_REF_NO = '';\r\n        this.TO = '';\r\n        this.coveringDate = '';\r\n        this.CL_CONTENT = '';\r\n        this.getCoverData = [];\r\n        this.service.OpenAs.subscribe((call1) => {\r\n            this.openAs = call1;\r\n        });\r\n        this.service.HR_REF_NO.subscribe((call) => {\r\n            this.HR_REF_NO1 = call.HR_REF_NO;\r\n        });\r\n        this.getLocation();\r\n        this.getRegardsDrop();\r\n        this.service.lovMasaterList.subscribe((lovMasaterList) => {\r\n            this.engineVarient = $.cordys.json.findObjects(lovMasaterList, 'LOV_TYPE', 'ENGINE_VARIANT');\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        for (let propName in changes) {\r\n            if (propName == 'clarificationType') {\r\n                let chng = changes[propName];\r\n                this.clarificationType = chng.currentValue;\r\n            }\r\n            if (propName == 'HR_REF_NO') {\r\n                let chng = changes[propName];\r\n                this.HR_REF_NO = chng.currentValue;\r\n                if (this.datavalidate(this.HR_REF_NO) != '') {\r\n                    setTimeout(() => {\r\n                        this.getFDHLCLEnClosureDetails();\r\n                        this.getFDHLCoveringLetterDetails();\r\n                    }, 1500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    clear() {\r\n        this.encolosureArr.forEach((obj) => {\r\n            obj.ENCLOSURE = null;\r\n        });\r\n        this.TO = '';\r\n        this.coveringDate = '';\r\n        this.CL_CONTENT = '';\r\n        // let ev = {target:{value:''}}\r\n        // this.selectRegards(ev);\r\n        this.regardsArr = [{ iamge: 'image', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }];\r\n        this.address = '';\r\n        this.regards = '';\r\n    }\r\n    clearSave() {\r\n        this.call_modal = false;\r\n        Promise.all([this.updateFdHlClEnclosure(), this.updateFdHlCoveringLetter()]).then((res) => {\r\n            this.call_modal = true;\r\n            this.data_send = { text: 'Covering Letter data saved successfully', active: this.call_modal };\r\n        });\r\n    }\r\n    addEnclosure() {\r\n        this.encolosureArr.push({ ENCLOSURE: '', CL_ENC_REF_NO: '' });\r\n    }\r\n    deleteEnclosure(obj) {\r\n        this.call_modal = false;\r\n        if (obj.CL_ENC_REF_NO != '') {\r\n            this.confirmationService.confirm({\r\n                message: 'Are you sure that you want to delete enclosure?',\r\n                header: 'Confirmation',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    let dataObj = {\r\n                        tuple: {\r\n                            old: {\r\n                                FD_HL_CL_ENCLOSURE: {\r\n                                    CL_ENC_REF_NO: obj.CL_ENC_REF_NO,\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    this.service.invokeService(\"UpdateFdHlClEnclosure\", dataObj, this.namespace, true, false).\r\n                        then((ajaxResponse) => {\r\n                        this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\r\n                        // this.call_modal = true;\r\n                        // this.data_send = { text: 'Record deleted successfully', active: this.call_modal};\r\n                    });\r\n                },\r\n                reject: (type) => {\r\n                    switch (type) {\r\n                        case ConfirmEventType.REJECT:\r\n                            break;\r\n                        case ConfirmEventType.CANCEL:\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\r\n        }\r\n    }\r\n    updateFdHlClEnclosure() {\r\n        return new Promise((resolve, reject) => {\r\n            let ParamTuple = [];\r\n            var params = {};\r\n            for (var obj of this.encolosureArr) {\r\n                if (this.datavalidate(obj.CL_ENC_REF_NO) == \"\") {\r\n                    params = {\r\n                        'new': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'HR_REF_NO': this.HR_REF_NO1,\r\n                                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE),\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                else {\r\n                    params = {\r\n                        'old': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'CL_ENC_REF_NO': obj.CL_ENC_REF_NO\r\n                            }\r\n                        },\r\n                        'new': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'HR_REF_NO': this.HR_REF_NO1,\r\n                                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE),\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                ParamTuple.push(params);\r\n            }\r\n            var paramsAll = { 'tuple': ParamTuple };\r\n            this.service.invokeService(\"UpdateFdHlClEnclosure\", paramsAll, this.namespace, true, false)\r\n                .then((res) => {\r\n                this.encolosureArr = res;\r\n                resolve('Res success from enclosure');\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n    async getFDHLCLEnClosureDetails() {\r\n        var param = { HR_REF_NO: this.datavalidate(this.HR_REF_NO) };\r\n        await this.service.invokeService(\"GetFDHLCLEnClosureDetails\", param, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.encolosureArr = res;\r\n        });\r\n    }\r\n    getLocation() {\r\n        this.service.invokeService(\"GetFD_HLAddressDetails\", null, this.namespace, true, false)\r\n            .then((res) => {\r\n            res.filter((obj) => {\r\n                if (obj.ADDR_TYPE == 'TO') {\r\n                    this.locationArr.push({ ADDRESS: obj.ADDRESS, ADDR_NAME: obj.ADDR_NAME, });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getRegardsDrop() {\r\n        this.service.invokeService(\"GetFDHLRegardsDetails\", null, this.namespace, true, false)\r\n            .then((res) => {\r\n            res.forEach((d) => {\r\n                this.regardsResponseArr = res;\r\n                this.regardsDropArr.push(d.CL_REGARDS);\r\n            });\r\n        });\r\n    }\r\n    selectRegards(e) {\r\n        this.regardsArr = [];\r\n        this.regardsResponseArr.filter((data) => {\r\n            if (data.CL_REGARDS == e.target.value) {\r\n                this.regardsArr.push({ iamge: 'image', data: data.SIGNATURE });\r\n                this.regardsArr.push({ iamge: '', data: data.REGA_NAME });\r\n                this.regardsArr.push({ iamge: '', data: data.DESIGNATION });\r\n                this.regardsArr.push({ iamge: '', data: data.DEPARTMENT });\r\n                this.regardsArr.push({ iamge: '', data: data.COMPANY_NAME });\r\n            }\r\n        });\r\n        if (e.target.value == '') {\r\n            this.regardsArr = [{ iamge: 'image', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }, { iamge: '', data: '' }];\r\n        }\r\n    }\r\n    selectLocation(e) {\r\n        this.locationArr.filter((d) => {\r\n            if (d.ADDR_NAME == e.target.value) {\r\n                this.address = d.ADDRESS;\r\n            }\r\n        });\r\n    }\r\n    updateFdHlCoveringLetter() {\r\n        return new Promise((resolve, reject) => {\r\n            let dataObj = {};\r\n            if (this.datavalidate(this.CL_REF_NO) != '') {\r\n                dataObj = {\r\n                    tuple: {\r\n                        old: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                CL_REF_NO: this.CL_REF_NO\r\n                            }\r\n                        },\r\n                        new: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                'CL_TO': this.datavalidate(this.TO),\r\n                                'CL_ADDRESS': this.datavalidate(this.address),\r\n                                'CL_DATE': this.service.dateFilter(this.coveringDate),\r\n                                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\r\n                                'CL_CONTENT': this.CL_CONTENT,\r\n                                'SIGNATURE': this.regardsArr[0].data,\r\n                                'REGA_NAME': this.regardsArr[1].data,\r\n                                'DESIGNATION': this.regardsArr[2].data,\r\n                                'DEPARTMENT': this.regardsArr[3].data,\r\n                                'COMPANY_NAME': this.regardsArr[4].data,\r\n                                'CL_REGARDS': this.regards\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                dataObj = {\r\n                    tuple: {\r\n                        new: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                'HR_REF_NO': this.datavalidate(this.HR_REF_NO),\r\n                                'CL_TO': this.datavalidate(this.TO),\r\n                                'CL_ADDRESS': this.datavalidate(this.address),\r\n                                'CL_DATE': this.service.dateFilter(this.coveringDate),\r\n                                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\r\n                                'CL_CONTENT': this.CL_CONTENT,\r\n                                'SIGNATURE': this.regardsArr[0].data,\r\n                                'REGA_NAME': this.regardsArr[1].data,\r\n                                'DESIGNATION': this.regardsArr[2].data,\r\n                                'DEPARTMENT': this.regardsArr[3].data,\r\n                                'COMPANY_NAME': this.regardsArr[4].data,\r\n                                'CL_REGARDS': this.regards\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            this.service.invokeService(\"UpdateFdHlCoveringLetter\", dataObj, this.namespace, true, false)\r\n                .then((res) => {\r\n                this.CL_REF_NO = res[0].CL_REF_NO;\r\n                resolve('Res success from covering');\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n    async getFDHLCoveringLetterDetails() {\r\n        this.regardsArr = [];\r\n        let param = {\r\n            HR_REF_NO: this.HR_REF_NO\r\n        };\r\n        await this.service.invokeService(\"GetFDHLCoveringLetterDetails\", param, this.namespace, true, false)\r\n            .then((res) => {\r\n            // let obj={target :{value:res[0].CL_REGARDS}}\r\n            this.getCoverData = res[0];\r\n            this.CL_REF_NO = res[0].CL_REF_NO;\r\n            this.TO = this.datavalidate(res[0].CL_TO);\r\n            this.coveringDate = this.datavalidate(this.datepipe.transform(res[0].CL_DATE, 'dd-MM-yyyy'));\r\n            this.CL_CONTENT = res[0].CL_CONTENT;\r\n            this.address = res[0].CL_ADDRESS;\r\n            this.regards = this.datavalidate(res[0].CL_REGARDS);\r\n            this.regardsArr.push({ iamge: 'image', data: res[0].SIGNATURE });\r\n            this.regardsArr.push({ iamge: '', data: res[0].REGA_NAME });\r\n            this.regardsArr.push({ iamge: '', data: res[0].DESIGNATION });\r\n            this.regardsArr.push({ iamge: '', data: res[0].DEPARTMENT });\r\n            this.regardsArr.push({ iamge: '', data: res[0].COMPANY_NAME });\r\n        });\r\n    }\r\n    datavalidate(data) {\r\n        if (data != undefined && data != null && data != \"\") {\r\n            return data;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n};\r\nCoveringLetterComponent.ctorParameters = () => [\r\n    { type: Services },\r\n    { type: DatePipe },\r\n    { type: ConfirmationService }\r\n];\r\nCoveringLetterComponent.propDecorators = {\r\n    HR_REF_NO: [{ type: Input }],\r\n    clarificationType: [{ type: Input }]\r\n};\r\nCoveringLetterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-covering-letter',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        providers: [ConfirmationService, MessageService],\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    })\r\n], CoveringLetterComponent);\r\nexport { CoveringLetterComponent };\r\n"]},"metadata":{},"sourceType":"module"}