{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\SVN Projects\\\\FD_Homologation_LatesT\\\\FD_Homologation\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ConfirmationService, ConfirmEventType, MessageService } from 'primeng/api';\nlet CoveringLetterComponent = class CoveringLetterComponent {\n  constructor(service, datepipe, confirmationService) {\n    this.service = service;\n    this.datepipe = datepipe;\n    this.confirmationService = confirmationService;\n    this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\n    this.obj1 = '';\n    this.dataEvent = new EventEmitter();\n    this.locationArr = [];\n    this.address = '';\n    this.engineVarient = [];\n    this.regards = '';\n    this.call_modal = false;\n    this.data_send = {};\n    this.HR_REF_NO1 = '';\n    this.openAs = false;\n    this.isSave = '';\n    this.CL_REF_NO = '';\n    this.TO = ''; // coveringDate: string = '';\n\n    this.CL_CONTENT = '';\n    this.getCoverData = [];\n    this.encolosureArr = [{\n      ENCLOSURE: '',\n      CL_ENC_REF_NO: ''\n    }];\n    this.isSubmitted = false;\n    this.checkValidData = {\n      CL_TO: '',\n      CL_CONTENT: '',\n      CL_REGARDS: '',\n      enclosureArr: [],\n      Date: ''\n    };\n    this.dis2 = false;\n    this.regardsArr = [{\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }];\n    this.regardsDropArr = [];\n    this.regardsResponseArr = [];\n    this.OpenAs = '';\n    this.actStage = '';\n    this.service.OpenAs.subscribe(call1 => {\n      this.openAs = call1;\n    });\n    this.service.HR_REF_NO.subscribe(call => {\n      this.HR_REF_NO1 = call.HR_REF_NO;\n    });\n    this.service.createPageEvents.subscribe(call1 => {\n      this.isSave = call1;\n    });\n    this.service.callTable4G.subscribe(call => {\n      if (this.datavalidate(call) == 'covering') {\n        this.isSubmitted = true;\n      }\n    });\n    this.getLocation();\n    this.service.lovMasaterList.subscribe(lovMasaterList => {\n      this.engineVarient = $.cordys.json.findObjects(lovMasaterList, 'LOV_TYPE', 'ENGINE_VARIANT');\n    });\n  }\n\n  ngOnChanges(changes) {\n    for (let propName in changes) {\n      if (propName == 'clarificationType') {\n        let chng = changes[propName];\n        this.clarificationType = chng.currentValue;\n      }\n\n      if (propName == 'HR_REF_NO') {\n        let chng = changes[propName];\n        this.HR_REF_NO = chng.currentValue;\n\n        if (this.datavalidate(this.HR_REF_NO) != '') {\n          setTimeout(() => {\n            this.getFDHLCLEnClosureDetails();\n            this.getFDHLCoveringLetterDetails();\n          }, 1500);\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.dataEvent.emit(this.checkValidData);\n    this.service.HR_REF_NO.subscribe(obj => {\n      this.actStage = this.datavalidate(obj.actStage);\n      let routerName = window.location.href.split('/')[window.location.href.split('/').length - 1];\n\n      if (routerName.includes('?')) {\n        this.OpenAs = routerName.split('?')[1].split('&')[1].split('=')[1];\n\n        if (this.OpenAs == 'customInboxTask' && this.actStage == '2' || this.OpenAs == 'completed' || this.OpenAs == 'dashboard') {\n          this.dis2 = true;\n        } else {\n          this.dis2 = false;\n        }\n      }\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  clear() {\n    this.encolosureArr.forEach(obj => {\n      obj.ENCLOSURE = null;\n    });\n    this.TO = ''; // this.coveringDate = '';\n\n    this.CL_CONTENT = ''; // let ev = {target:{value:''}}\n    // this.selectRegards(ev);\n\n    this.regardsArr = [{\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }, {\n      data: ''\n    }];\n    this.address = '';\n    this.regards = '';\n  }\n\n  clearSave() {\n    this.call_modal = false;\n    Promise.all([this.updateFdHlClEnclosure(), this.updateFdHlCoveringLetter()]).then(res => {\n      this.call_modal = true;\n      this.data_send = {\n        text: 'Covering Letter data saved successfully',\n        active: this.call_modal\n      };\n    });\n  }\n\n  addEnclosure() {\n    this.encolosureArr.push({\n      ENCLOSURE: '',\n      CL_ENC_REF_NO: ''\n    });\n  }\n\n  deleteEnclosure(obj) {\n    this.call_modal = false;\n\n    if (obj.CL_ENC_REF_NO != '') {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete enclosure?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          let dataObj = {\n            tuple: {\n              old: {\n                FD_HL_CL_ENCLOSURE: {\n                  CL_ENC_REF_NO: obj.CL_ENC_REF_NO\n                }\n              }\n            }\n          };\n          this.service.invokeService(\"UpdateFdHlClEnclosure\", dataObj, this.namespace, true, false).then(ajaxResponse => {\n            this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1); // this.call_modal = true;\n            // this.data_send = { text: 'Record deleted successfully', active: this.call_modal};\n          });\n        },\n        reject: type => {\n          switch (type) {\n            case ConfirmEventType.REJECT:\n              break;\n\n            case ConfirmEventType.CANCEL:\n              break;\n          }\n        }\n      });\n    } else {\n      this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\n    }\n  }\n\n  updateFdHlClEnclosure() {\n    return new Promise((resolve, reject) => {\n      let ParamTuple = [];\n      var params = {};\n\n      for (var obj of this.encolosureArr) {\n        if (this.datavalidate(obj.CL_ENC_REF_NO) == \"\") {\n          params = {\n            'new': {\n              'FD_HL_CL_ENCLOSURE': {\n                'HR_REF_NO': this.HR_REF_NO1,\n                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE)\n              }\n            }\n          };\n        } else {\n          params = {\n            'old': {\n              'FD_HL_CL_ENCLOSURE': {\n                'CL_ENC_REF_NO': obj.CL_ENC_REF_NO\n              }\n            },\n            'new': {\n              'FD_HL_CL_ENCLOSURE': {\n                'HR_REF_NO': this.HR_REF_NO1,\n                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE)\n              }\n            }\n          };\n        }\n\n        ParamTuple.push(params);\n      }\n\n      var paramsAll = {\n        'tuple': ParamTuple\n      };\n      this.service.invokeService(\"UpdateFdHlClEnclosure\", paramsAll, this.namespace, true, false).then(res => {\n        this.encolosureArr = res;\n        resolve('Res success from enclosure');\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  getFDHLCLEnClosureDetails() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var param = {\n        HR_REF_NO: _this.datavalidate(_this.HR_REF_NO)\n      };\n      yield _this.service.invokeService(\"GetFDHLCLEnClosureDetails\", param, _this.namespace, true, false).then(res => {\n        _this.encolosureArr = res;\n        _this.checkValidData = {\n          CL_TO: _this.datavalidate(_this.TO),\n          CL_CONTENT: _this.CL_CONTENT,\n          CL_REGARDS: _this.regards,\n          enclosureArr: _this.encolosureArr // Date: this.coveringDate\n\n        };\n\n        _this.dataEvent.emit(_this.checkValidData);\n      });\n    })();\n  }\n\n  getLocation() {\n    this.service.invokeService(\"GetFD_HLAddressDetails\", null, this.namespace, true, false).then(res => {\n      res.filter(obj => {\n        if (obj.ADDR_TYPE == 'TO') {\n          this.locationArr.push({\n            ADDRESS: obj.ADDRESS,\n            ADDR_NAME: obj.ADDR_NAME\n          });\n        }\n      });\n    });\n  }\n\n  selectLocation(e) {\n    this.checkValidData = {\n      CL_TO: this.datavalidate(this.TO),\n      CL_CONTENT: this.CL_CONTENT,\n      CL_REGARDS: this.regards,\n      enclosureArr: this.encolosureArr // Date: this.coveringDate\n\n    };\n    this.dataEvent.emit(this.checkValidData);\n    this.locationArr.filter(d => {\n      if (d.ADDR_NAME == e.target.value) {\n        this.address = d.ADDRESS;\n      }\n    });\n  }\n\n  dataSend() {\n    this.checkValidData = {\n      CL_TO: this.datavalidate(this.TO),\n      CL_CONTENT: this.CL_CONTENT,\n      CL_REGARDS: this.regards,\n      enclosureArr: this.encolosureArr // Date: this.coveringDate\n\n    };\n    this.dataEvent.emit(this.checkValidData);\n  }\n\n  updateFdHlCoveringLetter() {\n    return new Promise((resolve, reject) => {\n      let dataObj = {};\n\n      if (this.datavalidate(this.CL_REF_NO) != '') {\n        dataObj = {\n          tuple: {\n            old: {\n              FD_HL_COVERING_LETTER: {\n                CL_REF_NO: this.CL_REF_NO\n              }\n            },\n            new: {\n              FD_HL_COVERING_LETTER: {\n                'CL_TO': this.datavalidate(this.TO),\n                'CL_ADDRESS': this.datavalidate(this.address),\n                // 'CL_DATE': this.service.dateFilter(this.coveringDate),\n                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\n                'CL_CONTENT': this.CL_CONTENT\n              }\n            }\n          }\n        };\n      } else {\n        dataObj = {\n          tuple: {\n            new: {\n              FD_HL_COVERING_LETTER: {\n                'HR_REF_NO': this.datavalidate(this.HR_REF_NO),\n                'CL_TO': this.datavalidate(this.TO),\n                'CL_ADDRESS': this.datavalidate(this.address),\n                // 'CL_DATE': this.service.dateFilter(this.coveringDate),\n                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\n                'CL_CONTENT': this.CL_CONTENT\n              }\n            }\n          }\n        };\n      }\n\n      this.service.invokeService(\"UpdateFdHlCoveringLetter\", dataObj, this.namespace, true, false).then(res => {\n        this.CL_REF_NO = res[0].CL_REF_NO;\n        resolve('Res success from covering');\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  getFDHLCoveringLetterDetails() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.regardsArr = [];\n      let param = {\n        HR_REF_NO: _this2.HR_REF_NO\n      };\n      yield _this2.service.invokeService(\"GetFDHLCoveringLetterDetails\", param, _this2.namespace, true, false).then(res => {\n        // let obj={target :{value:res[0].CL_REGARDS}}\n        _this2.getCoverData = res[0];\n        _this2.CL_REF_NO = res[0].CL_REF_NO;\n        _this2.TO = _this2.datavalidate(res[0].CL_TO); // this.coveringDate = this.datavalidate(this.datepipe.transform(res[0].CL_DATE, 'dd-MM-yyyy'))\n\n        _this2.CL_CONTENT = res[0].CL_CONTENT;\n        _this2.address = res[0].CL_ADDRESS;\n        _this2.checkValidData = {\n          CL_TO: _this2.datavalidate(_this2.TO),\n          CL_CONTENT: _this2.CL_CONTENT,\n          CL_REGARDS: _this2.regards,\n          enclosureArr: _this2.encolosureArr // Date: this.coveringDate\n\n        };\n\n        _this2.dataEvent.emit(_this2.checkValidData);\n      });\n    })();\n  }\n\n  datavalidate(data) {\n    if (data != undefined && data != null && data != \"\") {\n      return data;\n    } else {\n      return \"\";\n    }\n  }\n\n};\n\n__decorate([Input()], CoveringLetterComponent.prototype, \"HR_REF_NO\", void 0);\n\n__decorate([Input()], CoveringLetterComponent.prototype, \"clarificationType\", void 0);\n\n__decorate([Output()], CoveringLetterComponent.prototype, \"dataEvent\", void 0);\n\nCoveringLetterComponent = __decorate([Component({\n  selector: 'app-covering-letter',\n  templateUrl: './covering-letter.component.html',\n  styleUrls: ['./covering-letter.component.css'],\n  providers: [ConfirmationService, MessageService]\n})], CoveringLetterComponent);\nexport { CoveringLetterComponent };","map":{"version":3,"sources":["D:/SVN Projects/FD_Homologation_LatesT/FD_Homologation/src/app/create-new-request/covering-letter/covering-letter.component.ts"],"names":["__decorate","Component","EventEmitter","Input","Output","ConfirmationService","ConfirmEventType","MessageService","CoveringLetterComponent","constructor","service","datepipe","confirmationService","namespace","obj1","dataEvent","locationArr","address","engineVarient","regards","call_modal","data_send","HR_REF_NO1","openAs","isSave","CL_REF_NO","TO","CL_CONTENT","getCoverData","encolosureArr","ENCLOSURE","CL_ENC_REF_NO","isSubmitted","checkValidData","CL_TO","CL_REGARDS","enclosureArr","Date","dis2","regardsArr","data","regardsDropArr","regardsResponseArr","OpenAs","actStage","subscribe","call1","HR_REF_NO","call","createPageEvents","callTable4G","datavalidate","getLocation","lovMasaterList","$","cordys","json","findObjects","ngOnChanges","changes","propName","chng","clarificationType","currentValue","setTimeout","getFDHLCLEnClosureDetails","getFDHLCoveringLetterDetails","ngOnInit","emit","obj","routerName","window","location","href","split","length","includes","ngAfterViewInit","clear","forEach","clearSave","Promise","all","updateFdHlClEnclosure","updateFdHlCoveringLetter","then","res","text","active","addEnclosure","push","deleteEnclosure","confirm","message","header","icon","accept","dataObj","tuple","old","FD_HL_CL_ENCLOSURE","invokeService","ajaxResponse","splice","indexOf","reject","type","REJECT","CANCEL","resolve","ParamTuple","params","paramsAll","catch","e","param","filter","ADDR_TYPE","ADDRESS","ADDR_NAME","selectLocation","d","target","value","dataSend","FD_HL_COVERING_LETTER","new","CL_ADDRESS","undefined","prototype","selector","templateUrl","styleUrls","providers"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ConfirmationService, ConfirmEventType, MessageService } from 'primeng/api';\r\nlet CoveringLetterComponent = class CoveringLetterComponent {\r\n    constructor(service, datepipe, confirmationService) {\r\n        this.service = service;\r\n        this.datepipe = datepipe;\r\n        this.confirmationService = confirmationService;\r\n        this.namespace = \"http://schemas.cordys.com/FD_HL_WSPackage\";\r\n        this.obj1 = '';\r\n        this.dataEvent = new EventEmitter();\r\n        this.locationArr = [];\r\n        this.address = '';\r\n        this.engineVarient = [];\r\n        this.regards = '';\r\n        this.call_modal = false;\r\n        this.data_send = {};\r\n        this.HR_REF_NO1 = '';\r\n        this.openAs = false;\r\n        this.isSave = '';\r\n        this.CL_REF_NO = '';\r\n        this.TO = '';\r\n        // coveringDate: string = '';\r\n        this.CL_CONTENT = '';\r\n        this.getCoverData = [];\r\n        this.encolosureArr = [{ ENCLOSURE: '', CL_ENC_REF_NO: '' }];\r\n        this.isSubmitted = false;\r\n        this.checkValidData = {\r\n            CL_TO: '',\r\n            CL_CONTENT: '',\r\n            CL_REGARDS: '',\r\n            enclosureArr: [],\r\n            Date: ''\r\n        };\r\n        this.dis2 = false;\r\n        this.regardsArr = [{ data: '' }, { data: '' }, { data: '' }, { data: '' }, { data: '' }];\r\n        this.regardsDropArr = [];\r\n        this.regardsResponseArr = [];\r\n        this.OpenAs = '';\r\n        this.actStage = '';\r\n        this.service.OpenAs.subscribe((call1) => {\r\n            this.openAs = call1;\r\n        });\r\n        this.service.HR_REF_NO.subscribe((call) => {\r\n            this.HR_REF_NO1 = call.HR_REF_NO;\r\n        });\r\n        this.service.createPageEvents.subscribe((call1) => {\r\n            this.isSave = call1;\r\n        });\r\n        this.service.callTable4G.subscribe((call) => {\r\n            if (this.datavalidate(call) == 'covering') {\r\n                this.isSubmitted = true;\r\n            }\r\n        });\r\n        this.getLocation();\r\n        this.service.lovMasaterList.subscribe((lovMasaterList) => {\r\n            this.engineVarient = $.cordys.json.findObjects(lovMasaterList, 'LOV_TYPE', 'ENGINE_VARIANT');\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        for (let propName in changes) {\r\n            if (propName == 'clarificationType') {\r\n                let chng = changes[propName];\r\n                this.clarificationType = chng.currentValue;\r\n            }\r\n            if (propName == 'HR_REF_NO') {\r\n                let chng = changes[propName];\r\n                this.HR_REF_NO = chng.currentValue;\r\n                if (this.datavalidate(this.HR_REF_NO) != '') {\r\n                    setTimeout(() => {\r\n                        this.getFDHLCLEnClosureDetails();\r\n                        this.getFDHLCoveringLetterDetails();\r\n                    }, 1500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.dataEvent.emit(this.checkValidData);\r\n        this.service.HR_REF_NO.subscribe((obj) => {\r\n            this.actStage = this.datavalidate(obj.actStage);\r\n            let routerName = window.location.href.split('/')[window.location.href.split('/').length - 1];\r\n            if (routerName.includes('?')) {\r\n                this.OpenAs = routerName.split('?')[1].split('&')[1].split('=')[1];\r\n                if (this.OpenAs == 'customInboxTask' && this.actStage == '2' || this.OpenAs == 'completed' || this.OpenAs == 'dashboard') {\r\n                    this.dis2 = true;\r\n                }\r\n                else {\r\n                    this.dis2 = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n    }\r\n    clear() {\r\n        this.encolosureArr.forEach((obj) => {\r\n            obj.ENCLOSURE = null;\r\n        });\r\n        this.TO = '';\r\n        // this.coveringDate = '';\r\n        this.CL_CONTENT = '';\r\n        // let ev = {target:{value:''}}\r\n        // this.selectRegards(ev);\r\n        this.regardsArr = [{ data: '' }, { data: '' }, { data: '' }, { data: '' }, { data: '' }];\r\n        this.address = '';\r\n        this.regards = '';\r\n    }\r\n    clearSave() {\r\n        this.call_modal = false;\r\n        Promise.all([this.updateFdHlClEnclosure(), this.updateFdHlCoveringLetter()]).then((res) => {\r\n            this.call_modal = true;\r\n            this.data_send = { text: 'Covering Letter data saved successfully', active: this.call_modal };\r\n        });\r\n    }\r\n    addEnclosure() {\r\n        this.encolosureArr.push({ ENCLOSURE: '', CL_ENC_REF_NO: '' });\r\n    }\r\n    deleteEnclosure(obj) {\r\n        this.call_modal = false;\r\n        if (obj.CL_ENC_REF_NO != '') {\r\n            this.confirmationService.confirm({\r\n                message: 'Are you sure that you want to delete enclosure?',\r\n                header: 'Confirmation',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    let dataObj = {\r\n                        tuple: {\r\n                            old: {\r\n                                FD_HL_CL_ENCLOSURE: {\r\n                                    CL_ENC_REF_NO: obj.CL_ENC_REF_NO,\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    this.service.invokeService(\"UpdateFdHlClEnclosure\", dataObj, this.namespace, true, false).\r\n                        then((ajaxResponse) => {\r\n                        this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\r\n                        // this.call_modal = true;\r\n                        // this.data_send = { text: 'Record deleted successfully', active: this.call_modal};\r\n                    });\r\n                },\r\n                reject: (type) => {\r\n                    switch (type) {\r\n                        case ConfirmEventType.REJECT:\r\n                            break;\r\n                        case ConfirmEventType.CANCEL:\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.encolosureArr.splice(this.encolosureArr.indexOf(obj), 1);\r\n        }\r\n    }\r\n    updateFdHlClEnclosure() {\r\n        return new Promise((resolve, reject) => {\r\n            let ParamTuple = [];\r\n            var params = {};\r\n            for (var obj of this.encolosureArr) {\r\n                if (this.datavalidate(obj.CL_ENC_REF_NO) == \"\") {\r\n                    params = {\r\n                        'new': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'HR_REF_NO': this.HR_REF_NO1,\r\n                                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE),\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                else {\r\n                    params = {\r\n                        'old': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'CL_ENC_REF_NO': obj.CL_ENC_REF_NO\r\n                            }\r\n                        },\r\n                        'new': {\r\n                            'FD_HL_CL_ENCLOSURE': {\r\n                                'HR_REF_NO': this.HR_REF_NO1,\r\n                                'ENCLOSURE': this.datavalidate(obj.ENCLOSURE),\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n                ParamTuple.push(params);\r\n            }\r\n            var paramsAll = { 'tuple': ParamTuple };\r\n            this.service.invokeService(\"UpdateFdHlClEnclosure\", paramsAll, this.namespace, true, false)\r\n                .then((res) => {\r\n                this.encolosureArr = res;\r\n                resolve('Res success from enclosure');\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n    async getFDHLCLEnClosureDetails() {\r\n        var param = { HR_REF_NO: this.datavalidate(this.HR_REF_NO) };\r\n        await this.service.invokeService(\"GetFDHLCLEnClosureDetails\", param, this.namespace, true, false)\r\n            .then((res) => {\r\n            this.encolosureArr = res;\r\n            this.checkValidData = {\r\n                CL_TO: this.datavalidate(this.TO),\r\n                CL_CONTENT: this.CL_CONTENT,\r\n                CL_REGARDS: this.regards,\r\n                enclosureArr: this.encolosureArr,\r\n                // Date: this.coveringDate\r\n            };\r\n            this.dataEvent.emit(this.checkValidData);\r\n        });\r\n    }\r\n    getLocation() {\r\n        this.service.invokeService(\"GetFD_HLAddressDetails\", null, this.namespace, true, false)\r\n            .then((res) => {\r\n            res.filter((obj) => {\r\n                if (obj.ADDR_TYPE == 'TO') {\r\n                    this.locationArr.push({ ADDRESS: obj.ADDRESS, ADDR_NAME: obj.ADDR_NAME, });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    selectLocation(e) {\r\n        this.checkValidData = {\r\n            CL_TO: this.datavalidate(this.TO),\r\n            CL_CONTENT: this.CL_CONTENT,\r\n            CL_REGARDS: this.regards,\r\n            enclosureArr: this.encolosureArr,\r\n            // Date: this.coveringDate\r\n        };\r\n        this.dataEvent.emit(this.checkValidData);\r\n        this.locationArr.filter((d) => {\r\n            if (d.ADDR_NAME == e.target.value) {\r\n                this.address = d.ADDRESS;\r\n            }\r\n        });\r\n    }\r\n    dataSend() {\r\n        this.checkValidData = {\r\n            CL_TO: this.datavalidate(this.TO),\r\n            CL_CONTENT: this.CL_CONTENT,\r\n            CL_REGARDS: this.regards,\r\n            enclosureArr: this.encolosureArr,\r\n            // Date: this.coveringDate\r\n        };\r\n        this.dataEvent.emit(this.checkValidData);\r\n    }\r\n    updateFdHlCoveringLetter() {\r\n        return new Promise((resolve, reject) => {\r\n            let dataObj = {};\r\n            if (this.datavalidate(this.CL_REF_NO) != '') {\r\n                dataObj = {\r\n                    tuple: {\r\n                        old: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                CL_REF_NO: this.CL_REF_NO\r\n                            }\r\n                        },\r\n                        new: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                'CL_TO': this.datavalidate(this.TO),\r\n                                'CL_ADDRESS': this.datavalidate(this.address),\r\n                                // 'CL_DATE': this.service.dateFilter(this.coveringDate),\r\n                                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\r\n                                'CL_CONTENT': this.CL_CONTENT,\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                dataObj = {\r\n                    tuple: {\r\n                        new: {\r\n                            FD_HL_COVERING_LETTER: {\r\n                                'HR_REF_NO': this.datavalidate(this.HR_REF_NO),\r\n                                'CL_TO': this.datavalidate(this.TO),\r\n                                'CL_ADDRESS': this.datavalidate(this.address),\r\n                                // 'CL_DATE': this.service.dateFilter(this.coveringDate),\r\n                                'CERTIFICATION_TYPE': this.datavalidate(this.clarificationType),\r\n                                'CL_CONTENT': this.CL_CONTENT,\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            this.service.invokeService(\"UpdateFdHlCoveringLetter\", dataObj, this.namespace, true, false)\r\n                .then((res) => {\r\n                this.CL_REF_NO = res[0].CL_REF_NO;\r\n                resolve('Res success from covering');\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n    async getFDHLCoveringLetterDetails() {\r\n        this.regardsArr = [];\r\n        let param = {\r\n            HR_REF_NO: this.HR_REF_NO\r\n        };\r\n        await this.service.invokeService(\"GetFDHLCoveringLetterDetails\", param, this.namespace, true, false)\r\n            .then((res) => {\r\n            // let obj={target :{value:res[0].CL_REGARDS}}\r\n            this.getCoverData = res[0];\r\n            this.CL_REF_NO = res[0].CL_REF_NO;\r\n            this.TO = this.datavalidate(res[0].CL_TO);\r\n            // this.coveringDate = this.datavalidate(this.datepipe.transform(res[0].CL_DATE, 'dd-MM-yyyy'))\r\n            this.CL_CONTENT = res[0].CL_CONTENT;\r\n            this.address = res[0].CL_ADDRESS;\r\n            this.checkValidData = {\r\n                CL_TO: this.datavalidate(this.TO),\r\n                CL_CONTENT: this.CL_CONTENT,\r\n                CL_REGARDS: this.regards,\r\n                enclosureArr: this.encolosureArr,\r\n                // Date: this.coveringDate\r\n            };\r\n            this.dataEvent.emit(this.checkValidData);\r\n        });\r\n    }\r\n    datavalidate(data) {\r\n        if (data != undefined && data != null && data != \"\") {\r\n            return data;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input()\r\n], CoveringLetterComponent.prototype, \"HR_REF_NO\", void 0);\r\n__decorate([\r\n    Input()\r\n], CoveringLetterComponent.prototype, \"clarificationType\", void 0);\r\n__decorate([\r\n    Output()\r\n], CoveringLetterComponent.prototype, \"dataEvent\", void 0);\r\nCoveringLetterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-covering-letter',\r\n        templateUrl: './covering-letter.component.html',\r\n        styleUrls: ['./covering-letter.component.css'],\r\n        providers: [ConfirmationService, MessageService]\r\n    })\r\n], CoveringLetterComponent);\r\nexport { CoveringLetterComponent };\r\n"]},"metadata":{},"sourceType":"module"}